{"version":3,"sources":["loader/Loader.js","detailRowView/DetailRowView.js","table/Table.js","tableSearch/TableSearch.js","input/Input.js","App.js","serviceWorker.js","index.js"],"names":["className","person","firstName","lastName","defaultValue","description","address","streetAddress","city","state","zip","props","style","cursor","onClick","onSort","bind","sortField","sort","data","map","item","key","id","phone","onRowSelect","email","useState","value","setValue","onSearch","type","onChange","event","target","htmlFor","Email","placeholder","Id","LastName","Phone","onSubmit","App","isLoading","inputFirstName","inputEmail","inputId","inputLastName","inputPhone","message","search","filteredData","row","currentPage","cloneData","concat","_","orderBy","setState","pageChangeHandler","selected","searchHandler","handleChange","name","handleAddRow","preventDefault","formData","validateRow","push","clearForm","fetch","response","json","this","prop","text","match","setTimeout","result","filter","toLowerCase","includes","length","getFilteredData","pageCount","Math","ceil","displayData","chunk","Fragment","Input","TableSearch","DetailRowView","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","nextClassName","previousLinkClassName","nextLinkClassName","forcePage","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.681cff8a.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.css';\n\nexport default () => <div className=\"lds-hourglass\" />","import React from 'react';\n\nexport default ({person}) => (\n    <div className='table__description'>\n        <p>Выбран пользователь <b>{person.firstName + ' ' + person.lastName}</b></p>\n        <p>\n            Описание: <br />\n            <textarea defaultValue={person.description} />\n        </p>\n\n        <p>Адрес проживания: <b>{person.address.streetAddress}</b></p>\n        <p>Город: <b>{person.address.city}</b></p>\n        <p>Провинция/штат: <b>{person.address.state}</b></p>\n        <p>Индекс: <b>{person.address.zip}</b></p>\n\n    </div>\n)","import React from 'react';\nimport './Table.css';\nexport default props => (\n    <table className=\"table__form\" style={{ cursor: \"pointer\" }}>\n        <thead>\n        <tr>\n            <th onClick={props.onSort.bind(null, \"id\")}>\n                ID {props.sortField === \"id\" ? <small>{props.sort}</small> : null}\n            </th>\n            <th onClick={props.onSort.bind(null, \"firstName\")}>\n                First Name{\" \"}\n                {props.sortField === \"firstName\" ? <small>{props.sort}</small> : null}\n            </th>\n            <th onClick={props.onSort.bind(null, \"lastName\")}>\n                Last Name{\" \"}\n                {props.sortField === \"lastName\" ? <small>{props.sort}</small> : null}\n            </th>\n            <th onClick={props.onSort.bind(null, \"email\")}>\n                E-mail{\" \"}\n                {props.sortField === \"email\" ? <small>{props.sort}</small> : null}\n            </th>\n            <th onClick={props.onSort.bind(null, \"phone\")}>\n                Phone{\" \"}\n                {props.sortField === \"phone\" ? <small>{props.sort}</small> : null}\n            </th>\n        </tr>\n        </thead>\n        <tbody>\n        {props.data.map(item => (\n            <tr\n                key={item.id + item.phone}\n                onClick={props.onRowSelect.bind(null, item)}\n            >\n                <td>{item.id}</td>\n                <td>{item.firstName}</td>\n                <td>{item.lastName}</td>\n                <td>{item.email}</td>\n                <td>{item.phone}</td>\n            </tr>\n        ))}\n        </tbody>\n    </table>\n);","\n\nimport React, {useState} from 'react'\n\nexport default props => {\n    const [value, setValue] = useState('')\n    const valueChangeHandler = event => {\n        setValue(event.target.value)\n    }\n\n    return (\n        <>\n            <p>Введите данные пользователя для поиска. Если такого пользователя нет, будут показаны все данные сразу.</p>\n        <div className=\"input-group mb-3 mt-3\">\n\n            <div className=\"input-group-prepend\">\n                <button\n                    className=\"btn btn-outline-secondary\"\n                    onClick={() => props.onSearch(value)} >Search</button>\n            </div>\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                onChange={valueChangeHandler}\n                value={value}\n            />\n        </div>\n            <p>Кликните на строку, появятся подробные данные пользователя</p>\n            </>\n    )\n}\n","import React from 'react';\n\n\n\nexport default props => {\n\n    return (\n        <form>\n            <p>Заполните все поля для добавления пользователя в таблицу.</p>\n            <div className=\"form-row\">\n                <div className=\"form-group col-md-6\">\n                    <label htmlFor=\"inputEmail\">Email</label>\n                    <input type=\"email\" value={props.Email} onChange={props.onChange} className=\"form-control\" id=\"inputEmail\" placeholder=\"Email\"/>\n                </div>\n                <div className=\"form-group col-md-6\">\n                    <label htmlFor=\"inputId\">ID</label>\n                    <input type=\"number\" value={props.Id} onChange={props.onChange} className=\"form-control\" id=\"inputId\" placeholder=\"ID\"/>\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"inputFirstName\">FirstName</label>\n                <input type=\"name\" value={props.firstName} onChange={props.onChange}  className=\"form-control\" id=\"inputFirstName\" placeholder=\"First Name\"/>\n            </div>\n            <div className=\"form-group\">\n                <label htmlFor=\"inputLastName\">LastName</label>\n                <input type=\"name\"  value={props.LastName} onChange={props.onChange}className=\"form-control\" id=\"inputLastName\"\n                       placeholder=\"Last Name\"/>\n            </div>\n            <div className=\"form-row\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"inputPhone\">Phone</label>\n                    <input type=\"phone\" value={props.Phone} onChange={props.onChange} className=\"form-control\" id=\"inputPhone\"\n                           placeholder=\"Phone\"/>\n                </div>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\" onClick={props.onSubmit}>Add user</button>\n        </form>\n    )\n}","import React, {Component} from 'react';\nimport Loader from \"./loader/Loader\";\nimport DetailRowView from './detailRowView/DetailRowView';\nimport Table from \"./table/Table\";\nimport _ from 'lodash';\nimport ReactPaginate from 'react-paginate';\nimport TableSearch from './tableSearch/TableSearch';\nimport Input from \"./input/Input\";\n\nclass App extends Component {\n\n    state = {\n        isLoading: true,\n        inputFirstName: '',\n        inputEmail: '',\n        inputId: '',\n        inputLastName: '',\n        inputPhone: '',\n        message: '',\n        data: [],\n        search: '',\n        filteredData: [],\n        sort: 'asc',\n        sortField: 'id', // поле по умолчанию\n        row: null,\n        currentPage: 0\n    }\n\n    async componentDidMount() {\n        const response = await fetch(`http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D`)\n        const data = await response.json()\n        //console.log(data)\n        this.setState({\n            isLoading: false,\n            data: _.orderBy(data, this.state.sortField, this.state.sort)\n        })\n    }\n\n    onSort = sortField => {\n        const cloneData = this.state.data.concat();\n        const sort = this.state.sort === 'asc' ? 'desc' : 'asc';\n        const data = _.orderBy(cloneData, sortField, sort);\n        this.setState({data, sort, sortField})\n    }\n\n    onRowSelect = row => (\n        this.setState({row})\n    )\n\n    pageChangeHandler = ({selected}) => (\n        this.setState({currentPage: selected})\n    )\n\n    searchHandler = search => {\n        this.setState({search, currentPage: 0})\n    }\n\n    handleChange = (event) => {\n        const target = event.target\n        const name = target.id\n        const value = target.value\n        this.setState({[name]: value})\n    }\n\n    validateRow(data) {\n        for (const prop in data) {\n            if (!data[prop]) {\n                const text = 'Произошла ошибка при отправки формы. Заполните, пожалуйста, поле ' + prop\n                this.setState({message: text})\n                return\n            } else if (prop === 'inputEmail') {\n                if (data[prop].match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)) {\n                } else {\n                    const text = 'Укажите настоящий email '\n                    this.setState({message: text})\n                    return\n                }\n\n            } else if (prop === 'inputFirstName') {\n                if (data[prop].match(/^[A-Za-zА-Яа-я\\s-]+$/)) {\n                } else {\n                    const text = 'Укажите настоящее имя '\n                    this.setState({message: text})\n                    return\n                }\n\n            } else if (prop === 'inputLastName') {\n                if (data[prop].match(/^[A-Za-zА-Яа-я\\s-]+$/)) {\n                } else {\n                    const text = 'Укажите настоящую фамилию '\n                    this.setState({message: text})\n                    return\n                }\n\n            } else if (prop === 'inputPhone') {\n                if (data[prop].match(/^((8|\\+7)[- ]?)?(\\(?\\d{3}\\)?[- ]?)?[\\d\\- ]{7,10}$/\n                )\n                ) {\n                } else {\n                    const text = 'Укажите настоящий телефон'\n                    this.setState({message: text})\n                    return\n                }\n\n            }\n        }\n        const text = 'Пользователь с именем ' + data['inputFirstName'] + ' успешно добавлен'\n        this.setState({message: text})\n        setTimeout(\n            () => this.setState({message: ''}),\n            3000\n        );\n        return 'OK'\n    }\n\n    clearForm(data) {\n        for (var prop in data) {\n            this.setState({[prop]: ''})\n        }\n    }\n\n    handleAddRow = (event) => {\n        event.preventDefault()\n        const {data, inputFirstName, inputLastName, inputEmail, inputId, inputPhone} = this.state\n        const formData = {\n            'inputFirstName': inputFirstName,\n            'inputLastName': inputLastName,\n            'inputEmail': inputEmail,\n            'inputId': inputId,\n            'inputPhone': inputPhone\n        }\n        const validate = this.validateRow(formData)\n        if (validate === 'OK') {\n            data.push({\n                'id': inputId,\n                'lastName': inputLastName,\n                'firstName': inputFirstName,\n                'email': inputEmail,\n                'phone': inputPhone,\n                'description': 'eget porta magna in facilisis at placerat consequat placerat pulvinar sapien',\n                'address': {\n                    'city': 'Moscow',\n                    'state': 'RU',\n                    'streetAddress': '51 Paustovskogo street',\n                    'zip': '214304'\n                }\n            })\n            this.clearForm(formData)\n\n        }\n    }\n\n\n    getFilteredData() {\n\n        const {data, search} = this.state\n\n        if (!search) {\n            return data\n        }\n        var result = data.filter(item => {\n            return (\n                item[\"firstName\"].toLowerCase().includes(search.toLowerCase()) ||\n                item[\"lastName\"].toLowerCase().includes(search.toLowerCase()) ||\n                item[\"email\"].toLowerCase().includes(search.toLowerCase())\n            );\n        });\n        if (!result.length) {\n            return data\n        }\n        return result\n    }\n\n\n    render() {\n        const pageSize = 10;\n\n        const filteredData = this.getFilteredData();\n        //console.log(filteredData)\n        const pageCount = Math.ceil(filteredData.length / pageSize)\n        const displayData = _.chunk(filteredData, pageSize)[this.state.currentPage]\n        return (\n            <>\n                <div className=\"container\">\n                    {\n                        this.state.isLoading\n                            ? <Loader/>\n                            : <React.Fragment>\n                                <Input\n                                    onSubmit={this.handleAddRow}\n                                    onChange={this.handleChange}\n                                    firstName={this.state.inputFirstName}\n                                    LastName={this.state.inputLastName}\n                                    Id={this.state.inputId}\n                                    Email={this.state.inputEmail}\n                                    Phone={this.state.inputPhone}\n                                />\n                                <div className={'table__warning '}>\n                                    {this.state.message}\n                                </div>\n                                <TableSearch onSearch={this.searchHandler}/>\n                                <div className={'table__box'}>\n                                    <Table\n                                        data={displayData}\n                                        onSort={this.onSort}\n                                        sort={this.state.sort}\n                                        sortField={this.state.sortField}\n                                        onRowSelect={this.onRowSelect}\n                                    />\n                                    {\n                                        this.state.row ? <DetailRowView person={this.state.row}/> : null\n                                    }\n                                </div>\n                            </React.Fragment>\n                    }\n                    {this.state.data.length > pageSize\n                        ?\n                        <ReactPaginate\n                            previousLabel={'<'}\n                            nextLabel={'>'}\n                            breakLabel={'...'}\n                            breakClassName={'break-me'}\n                            pageCount={pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={5}\n                            onPageChange={this.pageChangeHandler}\n                            containerClassName={'pagination'}\n                            activeClassName={'active'}\n                            pageClassName=\"page-item\"\n                            pageLinkClassName=\"page-link\"\n                            previousClassName=\"page-item\"\n                            nextClassName=\"page-item\"\n                            previousLinkClassName=\"page-link\"\n                            nextLinkClassName=\"page-link\"\n                            forcePage={this.state.currentPage}\n                        /> : null\n                    }\n\n                </div>\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}